apply plugin: 'com.android.library'
**APPLY_PLUGINS**

/*
The ARCore aar library contains the native shared libraries.  These are
extracted before building to a temporary directory.
 */
def natives_libpath = "${buildDir}/natives"

// Create a configuration to mark which aars to extract .so files from
configurations { natives }

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
**DEPS**
    // Azure Spatial Anchors
    implementation('com.squareup.okhttp3:okhttp:[3.11.0]')
    implementation('com.microsoft.appcenter:appcenter-analytics:[1.10.0]')
}

android {
    compileSdkVersion **APIVERSION**
    buildToolsVersion '**BUILDTOOLS**'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion **MINSDKVERSION**
        targetSdkVersion **TARGETSDKVERSION**
        ndk {
            abiFilters **ABIFILTERS**
        }
        versionCode **VERSIONCODE**
        versionName '**VERSIONNAME**'
        consumerProguardFiles 'proguard-unity.txt'**USER_PROGUARD**

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14", "-Wall"
                arguments "-DANDROID_STL=c++_static",
                        "-DNATIVE_LIBPATH=${natives_libpath}/jni",
                        "-DNATIVE_INCLUDE=${project.rootDir}/libraries/include"
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }**PACKAGING_OPTIONS**
}**REPOSITORIES****SOURCE_BUILD_SETUP**
**EXTERNAL_SOURCES**

// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractNativeLibraries() {
    // Always extract, this insures the native libs are updated if the version changes.
    outputs.upToDateWhen { false }
    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into natives_libpath
                include "jni/**/*"
            }
        }
    }
}

tasks.whenTaskAdded {
    task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
    }
}
